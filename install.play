---
- hosts: liveinstall_run
  tasks:

  - name: Create disk label
    parted:
      device: "{{ target_drive }}"
      label: msdos

  - name: Create root partition
    parted:
      device: "{{ target_drive }}"
      number: 1
      state: present
      flags:
      - boot

  - name: Create root filesystem
    filesystem:
      dev: "{{ target_drive}}1"
      fstype: ext4
      force: yes

  - name: Mount root partition
    mount:
      path: /mnt
      src: "{{ target_drive }}1"
      state: mounted
      fstype: ext4
      opts: defaults,discard

  - name: Define Arch repo
    copy:
      content: 'Server = {{ arch_repo_url }}'
      dest: /etc/pacman.d/mirrorlist

  - name: Refresh repo package list
    pacman:
      update_cache: yes
      update_cache_extra_args: -y

  - name: bootstrap Archlinux onto the target rootfs
    shell: pacstrap /mnt $(pacman -Sqg base | sed 's/^linux$/{{ kernel_variant }}/') grub openssh sudo python
    args:
      chdir: /root

  - name: generate fstab
    shell: genfstab -p /mnt >> /mnt/etc/fstab
    args:
      chdir: /root

  - name: Copy installation Chroot script to target drive
    template:
      src: chroot.sh.j2
      dest: /mnt/chroot.sh
      mode: "u+rx"

  - name: Create root's .ssh directory
    file:
      path: /mnt/root/.ssh
      state: directory
      mode: "700"

  - name: Copy authorized keys file to root user
    copy:
      remote_src: yes
      src: /root/.ssh/authorized_keys
      dest: /mnt/root/.ssh/authorized_keys

  - name: Install network configuration
    template:
      src: "10-wired-{{ network_mode }}.network.j2"
      dest: "/mnt/etc/systemd/network/10-wired-{{ network_mode }}.network"

  - name: Execute installation operations in chroot
    shell: arch-chroot /mnt ./chroot.sh

  - name: Remove chroot script from target drive
    file:
      path: /mnt/chroot.sh
      state: absent

  - name: Configure dns resolution to use systemd-networkd when in DHCP mode
    file:
      src: /run/systemd/resolve/resolv.conf
      path: /mnt/etc/resolv.conf
      state: link
      force: yes   # The link's target path is relative to the target system
    when: network_mode == "dhcp"

  - name: Copy authorized keys file to user directory
    copy:
      remote_src: yes
      src: /root/.ssh/authorized_keys
      dest: "/mnt/home/{{ username }}/.ssh/authorized_keys"

  - name: unmount target drive
    mount:
      path: /mnt
      src: "{{ target_drive }}1"
      state: unmounted
      